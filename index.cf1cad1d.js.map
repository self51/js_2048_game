{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nconst $a5fd07fa01589658$var$BOARD_SIZE = 4;\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = this.getNewBoard()){\n        this.state = initialState;\n        this.initialState = this.copyState(initialState);\n        this.prevState = this.copyState(this.state);\n        this.status = \"idle\";\n        this.score = 0;\n        this.isWin = false;\n    }\n    moveLeft() {\n        const move = ()=>{\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++){\n                const col = this.state[i];\n                const movedCol = this.moveLine(col);\n                this.state[i] = movedCol;\n            }\n        };\n        this.makeMove(move);\n    }\n    moveRight() {\n        const move = ()=>{\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++){\n                const col = this.state[i].reverse();\n                const movedCol = this.moveLine(col);\n                this.state[i] = movedCol.reverse();\n            }\n        };\n        this.makeMove(move);\n    }\n    moveUp() {\n        const move = ()=>{\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$BOARD_SIZE; rowIndex++){\n                const row = this.getRow(rowIndex);\n                const movedRow = this.moveLine(row);\n                this.changeRow(movedRow, rowIndex);\n            }\n        };\n        this.makeMove(move);\n    }\n    moveDown() {\n        const move = ()=>{\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$BOARD_SIZE; rowIndex++){\n                const row = this.getRow(rowIndex);\n                const movedRow = this.moveLine(row.reverse());\n                this.changeRow(movedRow.reverse(), rowIndex);\n            }\n        };\n        this.makeMove(move);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    updateScore(cellNumber) {\n        this.score += cellNumber;\n    }\n    getLineSum(arr) {\n        const sum = arr.reduce((a, b)=>a + b, 0);\n        return sum;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    getPrevState() {\n        return this.prevState;\n    }\n    setPrevState() {\n        this.prevState = this.copyState(this.state);\n    }\n    copyState(state) {\n        return state.map((line)=>[\n                ...line\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    setStatus(newStatus) {\n        this.status = newStatus;\n    }\n    updateStatus() {\n        if (this.isLose()) this.setStatus(\"lose\");\n        if (this.isWin) this.setStatus(\"win\");\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.addRandomCell();\n        this.addRandomCell();\n        this.setStatus(\"playing\");\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.copyState(this.initialState);\n        this.score = 0;\n        this.setStatus(\"idle\");\n    }\n    getNewBoard() {\n        return [\n            ...Array($a5fd07fa01589658$var$BOARD_SIZE)\n        ].map(()=>Array($a5fd07fa01589658$var$BOARD_SIZE).fill(0));\n    }\n    makeMove(move) {\n        const gameStatus = this.getStatus();\n        if (gameStatus === \"idle\" || gameStatus === \"lose\") return;\n        this.setPrevState();\n        move();\n        if (this.isMoved(this.getPrevState())) this.addRandomCell();\n        this.updateStatus();\n    }\n    moveLine(lineArr) {\n        const getOutZeroes = lineArr.filter((elem)=>elem !== 0);\n        const newLine = getOutZeroes;\n        for(let i = 0; i < newLine.length; i++){\n            const curr = newLine[i];\n            const next = newLine[i + 1];\n            if (curr === next) {\n                const newCell = curr + next;\n                newLine.splice(i, 1, newCell);\n                newLine.splice(i + 1, 1);\n                this.updateScore(curr + next);\n                if (newCell === 2048) this.isWin = true;\n            }\n        }\n        while(newLine.length !== $a5fd07fa01589658$var$BOARD_SIZE)newLine.push(0);\n        return newLine;\n    }\n    addRandomCell() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length !== 0) {\n            const anyIndex = Math.floor(Math.random() * emptyCells.length);\n            const anyPosition = emptyCells[anyIndex];\n            const randomValue = Math.random() < 0.9 ? 2 : 4;\n            this.state[anyPosition.rowIndex][anyPosition.colIndex] = randomValue;\n        }\n    }\n    getRow(rowIndex) {\n        const row = [];\n        for(let colIndex = 0; colIndex < $a5fd07fa01589658$var$BOARD_SIZE; colIndex++){\n            const col = this.state[colIndex];\n            const elem = col[rowIndex];\n            row.push(elem);\n        }\n        return row;\n    }\n    changeRow(rowToPlace, rowIndex) {\n        for(let colIndex = 0; colIndex < $a5fd07fa01589658$var$BOARD_SIZE; colIndex++)this.state[colIndex][rowIndex] = rowToPlace[colIndex];\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$BOARD_SIZE; rowIndex++)for(let colIndex = 0; colIndex < $a5fd07fa01589658$var$BOARD_SIZE; colIndex++){\n            const cell = this.state[rowIndex][colIndex];\n            if (cell === 0) emptyCells.push({\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        }\n        return emptyCells;\n    }\n    isMoved(prevState) {\n        for(let r = 0; r < $a5fd07fa01589658$var$BOARD_SIZE; r++)for(let c = 0; c < $a5fd07fa01589658$var$BOARD_SIZE; c++){\n            const prevCell = prevState[r][c];\n            const currCell = this.state[r][c];\n            if (prevCell !== currCell) return true;\n        }\n        return false;\n    }\n    isLose() {\n        for(let r = 0; r < $a5fd07fa01589658$var$BOARD_SIZE; r++)for(let c = 0; c < $a5fd07fa01589658$var$BOARD_SIZE; c++){\n            const currCell = this.state[r][c];\n            const nextCell = r + 1 < $a5fd07fa01589658$var$BOARD_SIZE ? this.state[r + 1][c] : -1;\n            const bottomCell = c + 1 < $a5fd07fa01589658$var$BOARD_SIZE ? this.state[r][c + 1] : -1;\n            const emptyCell = currCell === 0 || nextCell === 0 || bottomCell === 0;\n            const areCellsEqual = currCell === nextCell | currCell === bottomCell;\n            if (areCellsEqual || emptyCell) return false;\n        }\n        return true;\n    }\n    drawBoard(cells) {\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((colValue, colIndex)=>{\n                const calculateCellIndex = rowIndex * $a5fd07fa01589658$var$BOARD_SIZE + colIndex;\n                const cell = cells[calculateCellIndex];\n                if (colValue !== 0) {\n                    cell.textContent = colValue;\n                    cell.classList = `field-cell field-cell--${colValue}`;\n                } else {\n                    cell.textContent = null;\n                    cell.classList = `field-cell`;\n                }\n            });\n        });\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameKeys = [\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\"\n];\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$setupGame);\ndocument.addEventListener(\"keydown\", (keeydown)=>{\n    if (!$09e991522ca7e64e$var$gameKeys.includes(keeydown.key) || $09e991522ca7e64e$var$game.getStatus() === \"lose\") return;\n    $09e991522ca7e64e$var$defineMove(keeydown.key);\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$game.drawBoard($09e991522ca7e64e$var$cells);\n    $09e991522ca7e64e$var$defineMessage();\n});\nfunction $09e991522ca7e64e$var$setupGame() {\n    if ($09e991522ca7e64e$var$button.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.toggle(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$defineMessage();\n    }\n    $09e991522ca7e64e$var$game.drawBoard($09e991522ca7e64e$var$cells);\n}\nfunction $09e991522ca7e64e$var$defineMove(keydown) {\n    switch(keydown){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$defineMessage() {\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"win\":\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            break;\n        case \"playing\":\n            if (!$09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n            if (!$09e991522ca7e64e$var$messageLose.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\n\n\n//# sourceMappingURL=index.cf1cad1d.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst gameKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst cells = document.querySelectorAll('.field-cell');\n\nbutton.addEventListener('click', setupGame);\n\ndocument.addEventListener('keydown', keeydown => {\n  if (!gameKeys.includes(keeydown.key) || game.getStatus() === 'lose') {\n    return;\n  }\n\n  defineMove(keeydown.key);\n\n  score.textContent = game.getScore();\n  game.drawBoard(cells);\n  defineMessage();\n});\n\nfunction setupGame() {\n  if (button.textContent === 'Start') {\n    game.start();\n\n    button.textContent = 'Restart';\n    button.classList.toggle('restart');\n    messageStart.classList.toggle('hidden');\n  } else {\n    game.restart();\n    game.start();\n\n    defineMessage();\n  }\n\n  game.drawBoard(cells);\n}\n\nfunction defineMove(keydown) {\n  switch (keydown) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n}\n\nfunction defineMessage() {\n  switch (game.getStatus()) {\n    case 'win':\n      messageWin.classList.remove('hidden');\n      break;\n\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      break;\n\n    case 'playing':\n      if (!messageWin.classList.contains('hidden')) {\n        messageWin.classList.add('hidden');\n      }\n\n      if (!messageLose.classList.contains('hidden')) {\n        messageLose.classList.add('hidden');\n      }\n  }\n}\n","'use strict';\n\nconst BOARD_SIZE = 4;\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.getNewBoard()) {\n    this.state = initialState;\n    this.initialState = this.copyState(initialState);\n    this.prevState = this.copyState(this.state);\n    this.status = 'idle';\n    this.score = 0;\n    this.isWin = false;\n  }\n\n  moveLeft() {\n    const move = () => {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        const col = this.state[i];\n        const movedCol = this.moveLine(col);\n\n        this.state[i] = movedCol;\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  moveRight() {\n    const move = () => {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        const col = this.state[i].reverse();\n        const movedCol = this.moveLine(col);\n\n        this.state[i] = movedCol.reverse();\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  moveUp() {\n    const move = () => {\n      for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n        const row = this.getRow(rowIndex);\n        const movedRow = this.moveLine(row);\n\n        this.changeRow(movedRow, rowIndex);\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  moveDown() {\n    const move = () => {\n      for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n        const row = this.getRow(rowIndex);\n        const movedRow = this.moveLine(row.reverse());\n\n        this.changeRow(movedRow.reverse(), rowIndex);\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  updateScore(cellNumber) {\n    this.score += cellNumber;\n  }\n\n  getLineSum(arr) {\n    const sum = arr.reduce((a, b) => a + b, 0);\n\n    return sum;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  getPrevState() {\n    return this.prevState;\n  }\n\n  setPrevState() {\n    this.prevState = this.copyState(this.state);\n  }\n\n  copyState(state) {\n    return state.map(line => [...line]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  setStatus(newStatus) {\n    this.status = newStatus;\n  }\n\n  updateStatus() {\n    if (this.isLose()) {\n      this.setStatus('lose');\n    }\n\n    if (this.isWin) {\n      this.setStatus('win');\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.addRandomCell();\n    this.addRandomCell();\n    this.setStatus('playing');\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.setStatus('idle');\n  }\n\n  getNewBoard() {\n    return [...Array(BOARD_SIZE)].map(() => Array(BOARD_SIZE).fill(0));\n  }\n\n  makeMove(move) {\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === 'idle' || gameStatus === 'lose') {\n      return;\n    }\n\n    this.setPrevState();\n\n    move();\n\n    if (this.isMoved(this.getPrevState())) {\n      this.addRandomCell();\n    }\n\n    this.updateStatus();\n  }\n\n  moveLine(lineArr) {\n    const getOutZeroes = lineArr.filter(elem => elem !== 0);\n    const newLine = getOutZeroes;\n\n    for (let i = 0; i < newLine.length; i++) {\n      const curr = newLine[i];\n      const next = newLine[i + 1];\n\n      if (curr === next) {\n        const newCell = curr + next;\n\n        newLine.splice(i, 1, newCell);\n        newLine.splice(i + 1, 1);\n        this.updateScore(curr + next);\n\n        if (newCell === 2048) {\n          this.isWin = true;\n        }\n      }\n    }\n\n    while (newLine.length !== BOARD_SIZE) {\n      newLine.push(0);\n    }\n\n    return newLine;\n  }\n\n  addRandomCell() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length !== 0) {\n      const anyIndex = Math.floor(Math.random() * emptyCells.length);\n      const anyPosition = emptyCells[anyIndex];\n      const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.state[anyPosition.rowIndex][anyPosition.colIndex] = randomValue;\n    }\n  }\n\n  getRow(rowIndex) {\n    const row = [];\n\n    for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n      const col = this.state[colIndex];\n      const elem = col[rowIndex];\n\n      row.push(elem);\n    }\n\n    return row;\n  }\n\n  changeRow(rowToPlace, rowIndex) {\n    for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n      this.state[colIndex][rowIndex] = rowToPlace[colIndex];\n    }\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n      for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n        const cell = this.state[rowIndex][colIndex];\n\n        if (cell === 0) {\n          emptyCells.push({\n            rowIndex, colIndex,\n          });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  isMoved(prevState) {\n    for (let r = 0; r < BOARD_SIZE; r++) {\n      for (let c = 0; c < BOARD_SIZE; c++) {\n        const prevCell = prevState[r][c];\n        const currCell = this.state[r][c];\n\n        if (prevCell !== currCell) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isLose() {\n    for (let r = 0; r < BOARD_SIZE; r++) {\n      for (let c = 0; c < BOARD_SIZE; c++) {\n        const currCell = this.state[r][c];\n        const nextCell = r + 1 < BOARD_SIZE ? this.state[r + 1][c] : -1;\n        const bottomCell = c + 1 < BOARD_SIZE ? this.state[r][c + 1] : -1;\n\n        const emptyCell = currCell === 0 || nextCell === 0 || bottomCell === 0;\n        const areCellsEqual = currCell === nextCell | currCell === bottomCell;\n\n        if (areCellsEqual || emptyCell) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  drawBoard(cells) {\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((colValue, colIndex) => {\n        const calculateCellIndex = rowIndex * BOARD_SIZE + colIndex;\n        const cell = cells[calculateCellIndex];\n\n        if (colValue !== 0) {\n          cell.textContent = colValue;\n          cell.classList = `field-cell field-cell--${colValue}`;\n        } else {\n          cell.textContent = null;\n          cell.classList = `field-cell`;\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","getNewBoard","state","copyState","prevState","status","score","isWin","moveLeft","makeMove","i","col","movedCol","moveLine","moveRight","reverse","moveUp","rowIndex","row","getRow","movedRow","changeRow","moveDown","getScore","updateScore","cellNumber","getLineSum","arr","reduce","a","b","getState","getPrevState","setPrevState","map","line","getStatus","setStatus","newStatus","updateStatus","isLose","start","addRandomCell","restart","Array","fill","move","gameStatus","isMoved","lineArr","getOutZeroes","filter","elem","newLine","length","curr","next","newCell","splice","push","emptyCells","getEmptyCells","anyIndex","Math","floor","random","anyPosition","colIndex","rowToPlace","r","c","prevCell","currCell","nextCell","bottomCell","emptyCell","areCellsEqual","drawBoard","cells","forEach","colValue","cell","textContent","classList","$09e991522ca7e64e$var$gameKeys","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$defineMessage","remove","contains","add","addEventListener","toggle","keeydown","includes","key","$09e991522ca7e64e$var$defineMove","keydown"],"version":3,"file":"index.cf1cad1d.js.map"}
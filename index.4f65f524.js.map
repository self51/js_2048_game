{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$BOARD_SIZE = 4;\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getNewBoard();\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.state = initialState;\n        this.initialState = this.copyState(initialState);\n        this.prevState = this.copyState(this.state);\n        this.status = \"idle\";\n        this.score = 0;\n        this.isWin = false;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var move = function() {\n                    for(var i = 0; i < $3d28d7f1aac198f5$var$BOARD_SIZE; i++){\n                        var col = _this.state[i];\n                        var movedCol = _this.moveLine(col);\n                        _this.state[i] = movedCol;\n                    }\n                };\n                this.makeMove(move);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var move = function() {\n                    for(var i = 0; i < $3d28d7f1aac198f5$var$BOARD_SIZE; i++){\n                        var col = _this.state[i].reverse();\n                        var movedCol = _this.moveLine(col);\n                        _this.state[i] = movedCol.reverse();\n                    }\n                };\n                this.makeMove(move);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                var move = function() {\n                    for(var rowIndex = 0; rowIndex < $3d28d7f1aac198f5$var$BOARD_SIZE; rowIndex++){\n                        var row = _this.getRow(rowIndex);\n                        var movedRow = _this.moveLine(row);\n                        _this.changeRow(movedRow, rowIndex);\n                    }\n                };\n                this.makeMove(move);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var move = function() {\n                    for(var rowIndex = 0; rowIndex < $3d28d7f1aac198f5$var$BOARD_SIZE; rowIndex++){\n                        var row = _this.getRow(rowIndex);\n                        var movedRow = _this.moveLine(row.reverse());\n                        _this.changeRow(movedRow.reverse(), rowIndex);\n                    }\n                };\n                this.makeMove(move);\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore(cellNumber) {\n                this.score += cellNumber;\n            }\n        },\n        {\n            key: \"getLineSum\",\n            value: function getLineSum(arr) {\n                var sum = arr.reduce(function(a, b) {\n                    return a + b;\n                }, 0);\n                return sum;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getPrevState\",\n            value: function getPrevState() {\n                return this.prevState;\n            }\n        },\n        {\n            key: \"setPrevState\",\n            value: function setPrevState() {\n                this.prevState = this.copyState(this.state);\n            }\n        },\n        {\n            key: \"copyState\",\n            value: function copyState(state) {\n                return state.map(function(line) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(line);\n                });\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"setStatus\",\n            value: function setStatus(newStatus) {\n                this.status = newStatus;\n            }\n        },\n        {\n            key: \"updateStatus\",\n            value: function updateStatus() {\n                if (this.isLose()) this.setStatus(\"lose\");\n                if (this.isWin) this.setStatus(\"win\");\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.addRandomCell();\n                this.addRandomCell();\n                this.setStatus(\"playing\");\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = this.copyState(this.initialState);\n                this.score = 0;\n                this.setStatus(\"idle\");\n            }\n        },\n        {\n            key: \"getNewBoard\",\n            value: function getNewBoard() {\n                return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(Array($3d28d7f1aac198f5$var$BOARD_SIZE)).map(function() {\n                    return Array($3d28d7f1aac198f5$var$BOARD_SIZE).fill(0);\n                });\n            }\n        },\n        {\n            key: \"makeMove\",\n            value: function makeMove(move) {\n                var gameStatus = this.getStatus();\n                if (gameStatus === \"idle\" || gameStatus === \"lose\") return;\n                this.setPrevState();\n                move();\n                if (this.isMoved(this.getPrevState())) this.addRandomCell();\n                this.updateStatus();\n            }\n        },\n        {\n            key: \"moveLine\",\n            value: function moveLine(lineArr) {\n                var getOutZeroes = lineArr.filter(function(elem) {\n                    return elem !== 0;\n                });\n                var newLine = getOutZeroes;\n                for(var i = 0; i < newLine.length; i++){\n                    var curr = newLine[i];\n                    var next = newLine[i + 1];\n                    if (curr === next) {\n                        var newCell = curr + next;\n                        newLine.splice(i, 1, newCell);\n                        newLine.splice(i + 1, 1);\n                        this.updateScore(curr + next);\n                        if (newCell === 2048) this.isWin = true;\n                    }\n                }\n                while(newLine.length !== $3d28d7f1aac198f5$var$BOARD_SIZE)newLine.push(0);\n                return newLine;\n            }\n        },\n        {\n            key: \"addRandomCell\",\n            value: function addRandomCell() {\n                var emptyCells = this.getEmptyCells();\n                if (emptyCells.length !== 0) {\n                    var anyIndex = Math.floor(Math.random() * emptyCells.length);\n                    var anyPosition = emptyCells[anyIndex];\n                    var randomValue = Math.random() < 0.9 ? 2 : 4;\n                    this.state[anyPosition.rowIndex][anyPosition.colIndex] = randomValue;\n                }\n            }\n        },\n        {\n            key: \"getRow\",\n            value: function getRow(rowIndex) {\n                var row = [];\n                for(var colIndex = 0; colIndex < $3d28d7f1aac198f5$var$BOARD_SIZE; colIndex++){\n                    var col = this.state[colIndex];\n                    var elem = col[rowIndex];\n                    row.push(elem);\n                }\n                return row;\n            }\n        },\n        {\n            key: \"changeRow\",\n            value: function changeRow(rowToPlace, rowIndex) {\n                for(var colIndex = 0; colIndex < $3d28d7f1aac198f5$var$BOARD_SIZE; colIndex++)this.state[colIndex][rowIndex] = rowToPlace[colIndex];\n            }\n        },\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                var emptyCells = [];\n                for(var rowIndex = 0; rowIndex < $3d28d7f1aac198f5$var$BOARD_SIZE; rowIndex++)for(var colIndex = 0; colIndex < $3d28d7f1aac198f5$var$BOARD_SIZE; colIndex++){\n                    var cell = this.state[rowIndex][colIndex];\n                    if (cell === 0) emptyCells.push({\n                        rowIndex: rowIndex,\n                        colIndex: colIndex\n                    });\n                }\n                return emptyCells;\n            }\n        },\n        {\n            key: \"isMoved\",\n            value: function isMoved(prevState) {\n                for(var r = 0; r < $3d28d7f1aac198f5$var$BOARD_SIZE; r++)for(var c = 0; c < $3d28d7f1aac198f5$var$BOARD_SIZE; c++){\n                    var prevCell = prevState[r][c];\n                    var currCell = this.state[r][c];\n                    if (prevCell !== currCell) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isLose\",\n            value: function isLose() {\n                for(var r = 0; r < $3d28d7f1aac198f5$var$BOARD_SIZE; r++)for(var c = 0; c < $3d28d7f1aac198f5$var$BOARD_SIZE; c++){\n                    var currCell = this.state[r][c];\n                    var nextCell = r + 1 < $3d28d7f1aac198f5$var$BOARD_SIZE ? this.state[r + 1][c] : -1;\n                    var bottomCell = c + 1 < $3d28d7f1aac198f5$var$BOARD_SIZE ? this.state[r][c + 1] : -1;\n                    var emptyCell = currCell === 0 || nextCell === 0 || bottomCell === 0;\n                    var areCellsEqual = currCell === nextCell | currCell === bottomCell;\n                    if (areCellsEqual || emptyCell) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"drawBoard\",\n            value: function drawBoard(cells) {\n                this.state.forEach(function(row, rowIndex) {\n                    row.forEach(function(colValue, colIndex) {\n                        var calculateCellIndex = rowIndex * $3d28d7f1aac198f5$var$BOARD_SIZE + colIndex;\n                        var cell = cells[calculateCellIndex];\n                        if (colValue !== 0) {\n                            cell.textContent = colValue;\n                            cell.classList = \"field-cell field-cell--\".concat(colValue);\n                        } else {\n                            cell.textContent = null;\n                            cell.classList = \"field-cell\";\n                        }\n                    });\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$gameKeys = [\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\"\n];\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$cells = document.querySelectorAll(\".field-cell\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", $197cd56b15c33885$var$setupGame);\ndocument.addEventListener(\"keydown\", function(keeydown) {\n    if (!$197cd56b15c33885$var$gameKeys.includes(keeydown.key) || $197cd56b15c33885$var$game.getStatus() === \"lose\") return;\n    $197cd56b15c33885$var$defineMove(keeydown.key);\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore();\n    $197cd56b15c33885$var$game.drawBoard($197cd56b15c33885$var$cells);\n    $197cd56b15c33885$var$defineMessage();\n});\nfunction $197cd56b15c33885$var$setupGame() {\n    if ($197cd56b15c33885$var$button.textContent === \"Start\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n        $197cd56b15c33885$var$button.classList.toggle(\"restart\");\n        $197cd56b15c33885$var$messageStart.classList.toggle(\"hidden\");\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$defineMessage();\n    }\n    $197cd56b15c33885$var$game.drawBoard($197cd56b15c33885$var$cells);\n}\nfunction $197cd56b15c33885$var$defineMove(keydown) {\n    switch(keydown){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n}\nfunction $197cd56b15c33885$var$defineMessage() {\n    switch($197cd56b15c33885$var$game.getStatus()){\n        case \"win\":\n            $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n            break;\n        case \"playing\":\n            if (!$197cd56b15c33885$var$messageWin.classList.contains(\"hidden\")) $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n            if (!$197cd56b15c33885$var$messageLose.classList.contains(\"hidden\")) $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    }\n}\n\n})();\n//# sourceMappingURL=index.4f65f524.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst gameKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst cells = document.querySelectorAll('.field-cell');\n\nbutton.addEventListener('click', setupGame);\n\ndocument.addEventListener('keydown', keeydown => {\n  if (!gameKeys.includes(keeydown.key) || game.getStatus() === 'lose') {\n    return;\n  }\n\n  defineMove(keeydown.key);\n\n  score.textContent = game.getScore();\n  game.drawBoard(cells);\n  defineMessage();\n});\n\nfunction setupGame() {\n  if (button.textContent === 'Start') {\n    game.start();\n\n    button.textContent = 'Restart';\n    button.classList.toggle('restart');\n    messageStart.classList.toggle('hidden');\n  } else {\n    game.restart();\n    game.start();\n\n    defineMessage();\n  }\n\n  game.drawBoard(cells);\n}\n\nfunction defineMove(keydown) {\n  switch (keydown) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n}\n\nfunction defineMessage() {\n  switch (game.getStatus()) {\n    case 'win':\n      messageWin.classList.remove('hidden');\n      break;\n\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      break;\n\n    case 'playing':\n      if (!messageWin.classList.contains('hidden')) {\n        messageWin.classList.add('hidden');\n      }\n\n      if (!messageLose.classList.contains('hidden')) {\n        messageLose.classList.add('hidden');\n      }\n  }\n}\n","'use strict';\n\nconst BOARD_SIZE = 4;\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.getNewBoard()) {\n    this.state = initialState;\n    this.initialState = this.copyState(initialState);\n    this.prevState = this.copyState(this.state);\n    this.status = 'idle';\n    this.score = 0;\n    this.isWin = false;\n  }\n\n  moveLeft() {\n    const move = () => {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        const col = this.state[i];\n        const movedCol = this.moveLine(col);\n\n        this.state[i] = movedCol;\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  moveRight() {\n    const move = () => {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        const col = this.state[i].reverse();\n        const movedCol = this.moveLine(col);\n\n        this.state[i] = movedCol.reverse();\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  moveUp() {\n    const move = () => {\n      for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n        const row = this.getRow(rowIndex);\n        const movedRow = this.moveLine(row);\n\n        this.changeRow(movedRow, rowIndex);\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  moveDown() {\n    const move = () => {\n      for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n        const row = this.getRow(rowIndex);\n        const movedRow = this.moveLine(row.reverse());\n\n        this.changeRow(movedRow.reverse(), rowIndex);\n      }\n    };\n\n    this.makeMove(move);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  updateScore(cellNumber) {\n    this.score += cellNumber;\n  }\n\n  getLineSum(arr) {\n    const sum = arr.reduce((a, b) => a + b, 0);\n\n    return sum;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  getPrevState() {\n    return this.prevState;\n  }\n\n  setPrevState() {\n    this.prevState = this.copyState(this.state);\n  }\n\n  copyState(state) {\n    return state.map(line => [...line]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  setStatus(newStatus) {\n    this.status = newStatus;\n  }\n\n  updateStatus() {\n    if (this.isLose()) {\n      this.setStatus('lose');\n    }\n\n    if (this.isWin) {\n      this.setStatus('win');\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.addRandomCell();\n    this.addRandomCell();\n    this.setStatus('playing');\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.setStatus('idle');\n  }\n\n  getNewBoard() {\n    return [...Array(BOARD_SIZE)].map(() => Array(BOARD_SIZE).fill(0));\n  }\n\n  makeMove(move) {\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === 'idle' || gameStatus === 'lose') {\n      return;\n    }\n\n    this.setPrevState();\n\n    move();\n\n    if (this.isMoved(this.getPrevState())) {\n      this.addRandomCell();\n    }\n\n    this.updateStatus();\n  }\n\n  moveLine(lineArr) {\n    const getOutZeroes = lineArr.filter(elem => elem !== 0);\n    const newLine = getOutZeroes;\n\n    for (let i = 0; i < newLine.length; i++) {\n      const curr = newLine[i];\n      const next = newLine[i + 1];\n\n      if (curr === next) {\n        const newCell = curr + next;\n\n        newLine.splice(i, 1, newCell);\n        newLine.splice(i + 1, 1);\n        this.updateScore(curr + next);\n\n        if (newCell === 2048) {\n          this.isWin = true;\n        }\n      }\n    }\n\n    while (newLine.length !== BOARD_SIZE) {\n      newLine.push(0);\n    }\n\n    return newLine;\n  }\n\n  addRandomCell() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length !== 0) {\n      const anyIndex = Math.floor(Math.random() * emptyCells.length);\n      const anyPosition = emptyCells[anyIndex];\n      const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.state[anyPosition.rowIndex][anyPosition.colIndex] = randomValue;\n    }\n  }\n\n  getRow(rowIndex) {\n    const row = [];\n\n    for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n      const col = this.state[colIndex];\n      const elem = col[rowIndex];\n\n      row.push(elem);\n    }\n\n    return row;\n  }\n\n  changeRow(rowToPlace, rowIndex) {\n    for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n      this.state[colIndex][rowIndex] = rowToPlace[colIndex];\n    }\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n      for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n        const cell = this.state[rowIndex][colIndex];\n\n        if (cell === 0) {\n          emptyCells.push({\n            rowIndex, colIndex,\n          });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  isMoved(prevState) {\n    for (let r = 0; r < BOARD_SIZE; r++) {\n      for (let c = 0; c < BOARD_SIZE; c++) {\n        const prevCell = prevState[r][c];\n        const currCell = this.state[r][c];\n\n        if (prevCell !== currCell) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isLose() {\n    for (let r = 0; r < BOARD_SIZE; r++) {\n      for (let c = 0; c < BOARD_SIZE; c++) {\n        const currCell = this.state[r][c];\n        const nextCell = r + 1 < BOARD_SIZE ? this.state[r + 1][c] : -1;\n        const bottomCell = c + 1 < BOARD_SIZE ? this.state[r][c + 1] : -1;\n\n        const emptyCell = currCell === 0 || nextCell === 0 || bottomCell === 0;\n        const areCellsEqual = currCell === nextCell | currCell === bottomCell;\n\n        if (areCellsEqual || emptyCell) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  drawBoard(cells) {\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((colValue, colIndex) => {\n        const calculateCellIndex = rowIndex * BOARD_SIZE + colIndex;\n        const cell = cells[calculateCellIndex];\n\n        if (colValue !== 0) {\n          cell.textContent = colValue;\n          cell.classList = `field-cell field-cell--${colValue}`;\n        } else {\n          cell.textContent = null;\n          cell.classList = `field-cell`;\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","arguments","getNewBoard","instance","Constructor","state","copyState","prevState","status","score","isWin","value","_this","makeMove","col","movedCol","moveLine","reverse","rowIndex","row","getRow","movedRow","changeRow","cellNumber","reduce","a","b","map","line","newStatus","isLose","setStatus","addRandomCell","fill","move","gameStatus","getStatus","setPrevState","isMoved","getPrevState","updateStatus","lineArr","getOutZeroes","filter","elem","newLine","curr","next","newCell","splice","updateScore","push","emptyCells","getEmptyCells","anyIndex","Math","floor","random","anyPosition","colIndex","rowToPlace","r","c","prevCell","currCell","nextCell","bottomCell","emptyCell","areCellsEqual","cells","forEach","colValue","cell","textContent","classList","concat","$197cd56b15c33885$var$gameKeys","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$score","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$cells","querySelectorAll","$197cd56b15c33885$var$defineMessage","remove","contains","add","addEventListener","start","toggle","restart","drawBoard","keeydown","includes","$197cd56b15c33885$var$defineMove","keydown","moveLeft","moveRight","moveUp","moveDown","getScore"],"version":3,"file":"index.4f65f524.js.map"}